pragma solidity 0.4.15;

import "zeppelin/Ownable.sol";
import "zeppelin/StandardToken.sol";
import "DigitalSecurities.sol";

/**
 * This contract does this and that...
 */
contract DigitalSecuritiesWalletProxy is StandardToken {
	using SafeMath for uint256;

	DigitalSecurities token;

	function DigitalSecuritiesWalletProxy(address _tokenAddress) {
		assert(_tokenAddress != 0x0);
		token = DigitalSecurities(_tokenAddress);
	}

	/**
	* @dev Gets the balance of the specified address.
	* @param _owner The address to query the the balance of.
	* @return An uint256 representing the amount owned by the passed address.
	*/
	function balanceOf(address _owner) constant returns (uint256 balance) {
		return balances[_owner].add(token.getDividends(_owner));
	}

	/**
	* @dev transfer token for a specified address
	* @param _to The address to transfer to.
	* @param _value The amount to be transferred.
	*/
	function transfer(address _to, uint256 _value) returns (bool) {
		if (balances[msg.sender] < _value) {
			balances[msg.sender] = balances[msg.sender].add(token.withdraw());
		}
		if (super.transfer(_to, _value)) {
			if (_to.send(_value)) {
				return true;
			} else {
				revert();
			}
		}
		return false;
	}

	/**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amout of tokens to be transfered
   */
	function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
		if (balances[_from] < _value) {
			balances[_from] = balances[_from].add(token.withdraw(_from, this));
		}

		if (super.transferFrom(_from, _to, _value)) {
			if (_to.send(_value)) {
				return true;
			} else {
				revert();
			}
		}
		return false;
	}
}
